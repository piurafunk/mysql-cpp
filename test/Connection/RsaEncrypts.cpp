#include <catch2/catch.hpp>
#include <MysqlCpp/Connection.hpp>

#include <string>
#include <iostream>

using namespace std::string_literals;

TEST_CASE("Connector can RSA encrypt a password", "[connection-rsa]")
{
    const std::string hostname = "mysql";
    const unsigned int port = 3306;
    const std::string username = "user";
    const std::string password = "password";
    const std::string database = "test_database";

    auto connection = std::make_shared<MysqlCpp::Connection>(hostname, port, username, password, false);

    // Tests
    SECTION("Password: password")
    {
        std::string password = "\x70\x61\x73\x73\x77\x6f\x72\x64";
        std::string publicKey = "-----BEGIN PUBLIC KEY-----\n"
            "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0KLT+rU24JyYdOe1DVCV\n"
            "tOQCumqOSqjXTOxWgYMJMKXRhnDiuhqnYR32kXB+CqAeppL4nQi1zFIQaWEREVC2\n"
            "f111Mesx0O7lmuNs+zQYtuF4mpYjjtIlwb9dwQ9Whbeukg2W0NRokhcDLjxjDMh0\n"
            "sEztJL9bmbeu+4hY6vIjb+2vkwt3RuunfxErFP0N6MUDNI/qkUPDt6W5jbgAbfFf\n"
            "YXAnpOq1UGvqZmXpoRiHGKieJxXdyfIRDotkgk/B4i2un7TOhfnAHbMXE0r10cLZ\n"
            "N3CXxhHzaAJkYd9nl9mboOTCuabzUKSU9b7JF4IBGYP6dca/lvvOrIxga87oJUZf\n"
            "YwIDAQAB\n"
            "-----END PUBLIC KEY-----";

        std::string expected = "\x02\x42\xac\x13\x00\x03\x02\x42\xac\x13\x00\x04\x08\x00\x45\x00\x01\x38\xa8\x1d\x40\x00\x40\x06\x39\x75\xac\x13\x00\x04\xac\x13\x00\x03\xa5\xca\x0c\xea\xb5\x92\x70\x36\xa6\xf5\x4b\x67\x80\x18\x01\xf5\x59\x58\x00\x00\x01\x01\x08\x0a\xec\x11\x3c\xf6\xdf\x7c\x05\x82\x00\x01\x00\x05\x4f\xcc\x06\xf6\x9b\x15\x35\x1b\x23\x01\x74\x90\x25\x0f\x94\xdf\xa4\x2f\x2f\x31\xe1\xc9\x67\x33\xb0\xe4\x0a\x4b\x2a\x56\x91\xf2\x88\xfe\x7e\xae\xa4\x28\x08\xb8\xa0\xef\x2f\x1b\x4f\x2e\x8e\x83\x89\xec\x98\xd2\xcb\xea\x17\x3f\x53\x8c\xb2\xdd\xc3\x9a\x6f\x20\xaa\x0f\x26\x43\x30\x90\xab\x21\x6e\xb6\xd1\x90\x6e\x40\x69\x0a\x6e\x84\xf3\x8a\x35\xc6\xf1\x1d\x79\xd2\x2f\xbc\xd7\xd7\xff\xe2\x2a\xd9\x24\xe7\x23\x2c\x4f\x50\x61\x23\x55\x28\xfc\xd2\xfc\xbb\x59\x52\x7b\xdb\x03\xa4\xb9\x2a\x59\xd8\xeb\x14\x5a\x96\xee\x29\x85\x71\x08\x7c\xca\x4e\xba\x38\x6b\xd7\x90\xe5\xbd\x82\xfd\x4c\xb7\x1d\x17\x7a\xfd\x31\x7a\xf4\x17\x6b\x5e\x3e\xd2\x95\xee\xb3\xde\xa6\x41\xa0\x44\x00\x9c\x61\xdc\x44\x56\x16\x01\xd3\xf8\x4f\xeb\xbd\x84\xf0\x37\x56\xfb\x91\x46\x30\x97\x17\xa4\xe8\xc8\x96\xcb\xd0\x62\xbb\xca\xd0\x26\x48\x52\x30\x0a\x54\xb3\xda\xa3\xc8\xeb\xac\xbb\xfb\xe4\x82\xe1\xc1\x33\xf4\xb1\xf8\xf4\x85\xd7\xc0\x3e\x0b\xa5\x45\x11\xba\xe4\x05\xfb\xd9\xb4\x97\x07\xe2\x04\xde\xa3\x06\x63\x42\x7f\xa7\x0e\x0b\x68\xf9\xc3\xc7\x7c\x3c\xe1\xbd"s;

        std::string authResponse = connection->rsaEncryptPassword(password, publicKey);

        REQUIRE(authResponse == expected);
    }
}
